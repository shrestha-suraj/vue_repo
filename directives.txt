Here we can find the list of all the directives for Vue.js with examples

1) v-bind:attribute="data:value"   |  can also be writtend as    :attribute="data:value"  (this is a shortcut)
  [ Binds the value from the data object of the js file to the attribute of the html file ]
  ( Example:  <input type="text" v-bind:value="age"/>) OR
  ( Example:  <input type="text" :value="age"/>)

2) v-once
  [ Creates a sitiation where the element using this directive is not affected by value change ]
  ( Example: <h1 v-once>{{name}}</h1> ) -> Change in name due to any action doesnot change this value

3) v-html="data object value that has html element as string"
  [ If data is storing a value that is actually an html tag Vue escapes it unless we use this directive ]
  ( Example: <p v-html="myLink"></p> ) -> In js file we have data:{myLink:"<a href="/google">Google</a>"}

4) v-on:htmlEventListeners="method_to_run"  |   can also be written as    @htmlEventListener
  [ Vue lets us wrap html event listeners to vue so that we can call methods present in the vue object ]
  ( Example: <button v-on:click="doSomethingFunction"> Click Me</button> ) OR
  ( Example: <button @click="doSomethingFunction"> Click Me</button> )
  
5) v-model="data object value"
  [ This is a powerful and easy way for two way data binding for input tags. Change in input changes value in data object and vice versa]
  ( Example: <input v-model="name"/>)  -> In js file we have data:{name:"Suraj"}
  -> Change the input value in html changes the js value and change in js value in js changes html value (Two way data binding)

6) v-if="condition(true or false)"   |  v-else
  [ This is a directive that allows vue to attach or detach element to the dom depending on the provided condition]
  ( Example: <p v-if="show">You can see me</p>
             <p v-else>You can see me if the other guy is false</p> 
             -> In js file we have data:{show:true})

6) v-show="condition(true or false)"
  [ This is a directive that allows vue to hide element to the dom depending on the provided condition. The element is present in dom, just not visibel]
  ( Example: <p v-if="show">You can see me</p>
             <p v-else>You can see me if the other guy is false</p> 
             -> In js file we have data:{show:true})

7) v-for="element in elements"
  [ This is a way to loop through an array data provided in js and get individual elemnt that has this data]
  ( Example:  <ul> <li v-for="(person,index) in persons">{{index+1}} -> {{person.name}}</li></ul>)
  -> The the v-for is kept on li cause li is the element that has to be repeated for each item in persons

  (Another Example:  <h1 v-for="n in 10">{{n}}</h1>)   This allows vue to print from 1 to 10, n can be any variable name

8) ref="anyName"
  [ This helps vue js to reference to a DOM element and make changes to it. Simiar to querySelector in vanilla js]
  ( Example: <button @click="testMe" ref="myButton">Hello World</button>)
  -> I can access this button in Vue instance by typing {{{ this.$refs.myButton }}}